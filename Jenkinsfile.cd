pipeline {
    agent any

    environment {
        // These will be injected from Jenkins credentials / secrets
        AZURE_CLIENT_ID     = credentials('AZ_APPID')      // Service Principal App ID
        AZURE_CLIENT_SECRET = credentials('AZ_PASS')       // Service Principal Password
        AZURE_TENANT_ID     = credentials('AZ_TENANT')     // Tenant ID
        AZURE_SUBSCRIPTION  = credentials('AZ_SUB')        // Subscription ID

        AZURE_WEBAPP_NAME   = "node-mongo-sample-webapp"           // <-- change to your Web App
        AZURE_RESOURCE_GROUP = "rg-node-mongo-jenkins"       // <-- change accordingly
    }

    stages {
        stage('Login + Configure') {
            steps {
                bat '''
                    echo ===== Azure CLI Login =====
                    set AZURE_CLIENT_ID=%AZURE_CLIENT_ID%
                    set AZURE_CLIENT_SECRET=%AZURE_CLIENT_SECRET%
                    set AZURE_TENANT_ID=%AZURE_TENANT_ID%
                    set AZURE_SUBSCRIPTION_ID=%AZURE_SUBSCRIPTION%

                    echo Logging in...
                    az login --service-principal ^
                        --username %AZURE_CLIENT_ID% ^
                        --password %AZURE_CLIENT_SECRET% ^
                        --tenant %AZURE_TENANT_ID% ^
                        --output none || exit /b 1

                    echo Setting subscription...
                    az account set --subscription %AZURE_SUBSCRIPTION_ID% || exit /b 1

                    echo Current account:
                    az account show --output table
                '''
            }
        }

        stage('Build') {
            steps {
                bat '''
                    echo ===== Installing Dependencies =====
                    call npm install

                    echo ===== Building App =====
                    call npm run build || echo No build step, skipping...
                '''
            }
        }

        stage('Package') {
            steps {
                bat '''
                    echo ===== Packaging App =====
                    if exist package.zip del /f /q package.zip
                    powershell -Command "Compress-Archive -Path * -DestinationPath package.zip -Force"
                '''
            }
        }

        stage('Deploy') {
            steps {
                bat '''
                    echo ===== Deploying to Azure Web App =====
                    az webapp deployment source config-zip ^
                        --resource-group %AZURE_RESOURCE_GROUP% ^
                        --name %AZURE_WEBAPP_NAME% ^
                        --src package.zip
                '''
            }
        }

        stage('Verify') {
            steps {
                bat '''
                    echo ===== Verifying Deployment =====
                    az webapp show -g %AZURE_RESOURCE_GROUP% -n %AZURE_WEBAPP_NAME% --query state -o tsv
                '''
            }
        }
    }
}
