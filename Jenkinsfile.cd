pipeline {
  agent any

  parameters {
    string(name: 'CI_BUILD_NUM', defaultValue: '', description: 'Build number from CI to deploy (leave blank for latest successful).')
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    CI_JOB_NAME = 'node-mongo-ci'             // name of your CI job
    APP_NAME    = 'node-mongo-sample-webapp'  // must match Terraform var.app_name
    HEALTH_PATH = '/'                         // change if you have /health route
  }

  stages {
    stage('Fetch Artifact from CI') {
      steps {
        script {
          // Fetch from CI job
          def sel = params.CI_BUILD_NUM?.trim() ? specific(params.CI_BUILD_NUM) : lastSuccessful()
          step([$class: 'CopyArtifact',
                projectName: env.CI_JOB_NAME,
                selector: sel,
                filter: 'dist/app.zip',
                flatten: true,
                fingerprintArtifacts: true])
        }
        bat 'dir app.zip'
      }
    }

    stage('Azure Login') {
      steps {
        withCredentials([
          string(credentialsId: 'azure-client-id', variable: 'AZ_APPID'),
          string(credentialsId: 'azure-client-secret', variable: 'AZ_PASS'),
          string(credentialsId: 'azure-tenant-id', variable: 'AZ_TENANT'),
          string(credentialsId: 'azure-subscription-id', variable: 'AZ_SUB')
        ]) {
          bat '''
            az logout || exit /b 0
            az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%" >nul
            az account set --subscription "%AZ_SUB%"
            az account show
          '''
        }
      }
    }

    stage('Set App Setting (skip Oryx build)') {
      steps {
        bat '''
          set RG_NAME=
          for /f "delims=" %%r in ('az webapp show --name "%APP_NAME%" --query resourceGroup -o tsv') do set RG_NAME=%%r
          echo Setting SCM_DO_BUILD_DURING_DEPLOYMENT=false
          az webapp config appsettings set --name "%APP_NAME%" --resource-group "%RG_NAME%" --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false
        '''
      }
    }

    stage('Deploy to Azure Web App') {
      steps {
        bat '''
          set RG_NAME=
          for /f "delims=" %%r in ('az webapp show --name "%APP_NAME%" --query resourceGroup -o tsv') do set RG_NAME=%%r
          echo Deploying prebuilt app.zip to %APP_NAME%
          az webapp deploy --name "%APP_NAME%" --resource-group "%RG_NAME%" --src-path app.zip --type zip
        '''
      }
    }

    stage('Verify Health') {
      steps {
        bat '''
          set FQDN=
          for /f "delims=" %%h in ('az webapp show --name "%APP_NAME%" --query defaultHostName -o tsv') do set FQDN=%%h
          echo Health check: https://%FQDN%%HEALTH_PATH%
          set /a count=0
          :retry
          set /a count+=1
          curl -fsS "https://%FQDN%%HEALTH_PATH%" >nul 2>nul
          if %errorlevel%==0 (
            echo Health check OK
          ) else (
            if %count% LSS 10 (
              echo Retry %count%...
              timeout /t 6 >nul
              goto retry
            ) else (
              echo Health check failed
              exit /b 1
            )
          )
        '''
      }
    }
  }

  post {
    always {
      bat 'az logout || exit /b 0'
    }
    success {
      echo "Deployment succeeded & health check passed."
    }
    failure {
      echo "Deployment failed. Check logs."
    }
  }
}
