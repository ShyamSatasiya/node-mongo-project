pipeline {
  agent any

  parameters {
    string(name: 'CI_BUILD_NUM', defaultValue: '', description: 'Build number from CI to deploy (leave blank for latest successful).')
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    CI_JOB_NAME = 'Node-mongo-webapp'             // name of your CI job
    APP_NAME    = 'node-mongo-sample-webapp'  // must match Terraform var.app_name
    HEALTH_PATH = '/'                         // change if you have /health route
  }

  stages {
    stage('Fetch Artifact from CI') {
      steps {
        script {
          def sel = params.CI_BUILD_NUM?.trim() ? specific(params.CI_BUILD_NUM) : lastSuccessful()
          step([$class: 'CopyArtifact',
                projectName: env.CI_JOB_NAME,
                selector: sel,
                filter: 'dist/app.zip',
                flatten: true,
                fingerprintArtifacts: true])
        }
        bat 'if not exist app.zip (echo Missing app.zip & exit /b 1) & dir app.zip'
      }
    }

    stage('Login, Configure, Deploy & Verify') {
      steps {
        withCredentials([
          string(credentialsId: 'AZURE_SP_APPID', variable: 'AZ_APPID'),
          string(credentialsId: 'AZURE_SP_PASSWORD', variable: 'AZ_PASS'),
          string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZ_TENANT'),
          string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZ_SUB')
        ]) {
          bat '''
            rem ===== Azure login =====
            az logout || exit /b 0
            az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%" >nul
            if errorlevel 1 exit /b 1
            az account set --subscription "%AZ_SUB%"
            if errorlevel 1 exit /b 1
            az account show || exit /b 1

            rem ===== Resolve resource IDs (no RG needed later) =====
            for /f "usebackq delims=" %%i in (`az webapp show --name "%APP_NAME%" --query id -o tsv`) do set APP_ID=%%i
            for /f "usebackq delims=" %%h in (`az webapp show --name "%APP_NAME%" --query defaultHostName -o tsv`) do set FQDN=%%h
            if not defined APP_ID (echo Could not resolve app resource id & exit /b 1)
            if not defined FQDN (echo Could not resolve app hostname & exit /b 1)

            rem ===== Disable Oryx build (we ship prebuilt node_modules) =====
            az webapp config appsettings set --ids "%APP_ID%" --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false
            if errorlevel 1 exit /b 1

            rem ===== Deploy ZIP via --ids =====
            az webapp deploy --ids "%APP_ID%" --src-path app.zip --type zip
            if errorlevel 1 exit /b 1

            rem ===== Health check with retries =====
            set COUNT=0
            :retry
            set /a COUNT+=1
            curl -fsS "https://%FQDN%%HEALTH_PATH%" >nul 2>nul
            if %errorlevel%==0 (
              echo Health check OK at https://%FQDN%%HEALTH_PATH%
              exit /b 0
            ) else (
              if %COUNT% LSS 10 (
                echo Retry %COUNT%...
                timeout /t 6 >nul
                goto retry
              ) else (
                echo Health check failed at https://%FQDN%%HEALTH_PATH% >&2
                exit /b 1
              )
            )
          '''
        }
      }
    }
  }

  post {
    always { bat 'az logout || exit /b 0' }
    success { echo 'Deployment succeeded & health check passed.' }
    failure { echo 'Deployment failed. See logs above.' }
  }
}
