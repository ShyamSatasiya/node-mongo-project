pipeline {
  agent any

  parameters {
    string(name: 'CI_BUILD_NUM', defaultValue: '', description: 'Build number from CI to deploy (leave blank for latest successful).')
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    CI_JOB_NAME  = 'Node-mongo-webapp'          // your CI job name
    APP_NAME     = 'node-mongo-sample-webapp'   // must match Terraform/app service
    HEALTH_PATH  = '/'                          // change to /health if you have one
    NODE_VERSION = '18-lts'
  }

  stages {
    stage('Fetch Artifact from CI') {
      steps {
        script {
          def sel = params.CI_BUILD_NUM?.trim() ? specific(params.CI_BUILD_NUM) : lastSuccessful()
          step([$class: 'CopyArtifact',
                projectName: env.CI_JOB_NAME,
                selector: sel,
                filter: 'dist/app.zip',
                flatten: true,
                fingerprintArtifacts: true])
        }
        bat 'if not exist app.zip (echo Missing app.zip & exit /b 1) & dir app.zip'
      }
    }

    stage('Login + Configure + Deploy + Verify') {
      environment {
        AZ_APPID = credentials('azure-client-id')
        AZ_PASS  = credentials('azure-client-secret')
        AZ_TENANT = credentials('azure-tenant-id')
        AZ_SUB = credentials('azure-subscription-id')
      }
      steps {
        bat '''
          @echo on
          setlocal EnableExtensions EnableDelayedExpansion

          echo ===== Validating secrets =====
          echo AZ_APPID=%AZ_APPID:~0,4%****
          echo AZ_TENANT=%AZ_TENANT:~0,4%****
          echo AZ_SUB=%AZ_SUB%

          rem ===== Azure login =====
          az --version || exit /b 1
          az logout
          az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%"
          if errorlevel 1 (echo [ERROR] az login failed & exit /b 1)

          az account set --subscription "%AZ_SUB%"
          if errorlevel 1 (echo [ERROR] az account set failed & exit /b 1)

          for /f "usebackq delims=" %%s in (`az account show --query id -o tsv`) do set ACTIVE_SUB=%%s
          echo Active subscription: %ACTIVE_SUB%

          rem ===== Resolve app by name =====
          for /f "usebackq delims=" %%i in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].id" -o tsv`) do set APP_ID=%%i
          for /f "usebackq delims=" %%h in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].defaultHostName" -o tsv`) do set FQDN=%%h
          if not defined APP_ID (
            echo [ERROR] App "%APP_NAME%" not found in subscription "%AZ_SUB%".
            az webapp list --query "[].{name:name,rg:resourceGroup}" -o table
            exit /b 1
          )
          echo APP_ID=%APP_ID%
          echo FQDN=%FQDN%

          rem ===== Configure runtime =====
          az webapp config set --ids "%APP_ID%" --linux-fx-version "NODE|18-lts"
          if errorlevel 1 (echo [ERROR] setting linux-fx-version failed & exit /b 1)

          az webapp config appsettings set --ids "%APP_ID%" --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
          if errorlevel 1 (echo [ERROR] setting appsettings failed & exit /b 1)

          rem ===== Deploy ZIP =====
          if not exist app.zip (echo [ERROR] Missing app.zip in workspace & exit /b 1)
          az webapp deploy --ids "%APP_ID%" --src-path app.zip --type zip
          if errorlevel 1 (echo [ERROR] deploy failed & exit /b 1)

          rem ===== Health check with retries =====
          if not defined FQDN for /f "usebackq delims=" %%h in (`az webapp show --ids "%APP_ID%" --query defaultHostName -o tsv`) do set FQDN=%%h
          if not defined FQDN (echo [ERROR] Could not resolve hostname & exit /b 1)

          set COUNT=0
          :retry
          set /a COUNT+=1
          curl -fsS "https://%FQDN%%HEALTH_PATH%" >nul 2>nul && goto ok
          if %COUNT% LSS 10 (echo Retry %COUNT%... & timeout /t 6 >nul & goto retry)
          echo [ERROR] Health check failed at https://%FQDN%%HEALTH_PATH%
          exit /b 1
          :ok
          echo Health check OK at https://%FQDN%%HEALTH_PATH%

          endlocal
        '''
      }
    }
  }

  post {
    always { bat 'az logout || exit /b 0' }
    success { echo 'Deployment succeeded & health check passed.' }
    failure { echo 'Deployment failed. See logs above.' }
  }
}
