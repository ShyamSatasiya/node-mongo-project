pipeline {
  agent any

  parameters {
    string(name: 'CI_BUILD_NUM', defaultValue: '', description: 'Build number from CI to deploy (leave blank for latest successful).')
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    CI_JOB_NAME  = 'Node-mongo-webapp'          // your CI job name
    APP_NAME     = 'node-mongo-sample-webapp'   // must match Terraform
    HEALTH_PATH  = '/'                          // change to /health if you have one
    NODE_VERSION = '18-lts'
  }

  stages {
    stage('Fetch Artifact from CI') {
      steps {
        script {
          def sel = params.CI_BUILD_NUM?.trim() ? specific(params.CI_BUILD_NUM) : lastSuccessful()
          step([$class: 'CopyArtifact',
                projectName: env.CI_JOB_NAME,
                selector: sel,
                filter: 'dist/app.zip',
                flatten: true,
                fingerprintArtifacts: true])
        }
        bat 'if not exist app.zip (echo Missing app.zip & exit /b 1) & dir app.zip'
      }
    }

    stage('Login + Configure + Deploy + Verify') {
      steps {
        withCredentials([
          // ⬇️ USE YOUR REAL CREDENTIAL IDS HERE (must match what you created in Jenkins)
          string(credentialsId: 'azure-client-id',         variable: 'AZ_APPID'),
          string(credentialsId: 'azure-client-secret',     variable: 'AZ_PASS'),
          string(credentialsId: 'azure-tenant-id',         variable: 'AZ_TENANT'),
          string(credentialsId: 'azure-subscription-id',   variable: 'AZ_SUB')
        ]) {
          bat '''
            @echo on
            rem ===== Azure login =====
            az --version || exit /b 1
            az logout
            az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%"
            if errorlevel 1 exit /b 1
            az account set --subscription "%AZ_SUB%"
            if errorlevel 1 exit /b 1
            az account show --query "{sub:id}" -o tsv

            rem ===== Resolve app by name in current subscription =====
            for /f "usebackq delims=" %%i in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].id" -o tsv`) do set APP_ID=%%i
            for /f "usebackq delims=" %%h in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].defaultHostName" -o tsv`) do set FQDN=%%h
            if not defined APP_ID (echo App "%APP_NAME%" not found in subscription "%AZ_SUB%". >&2 & exit /b 1)

            rem ===== Ensure Node and startup are set =====
            az webapp config set --ids "%APP_ID%" --linux-fx-version "NODE|%NODE_VERSION%"
            if errorlevel 1 exit /b 1

            rem OPTION 1: Let Oryx build & start app (simplest)
            az webapp config appsettings set --ids "%APP_ID%" --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
            if errorlevel 1 exit /b 1

            rem OPTION 2 (alternative): keep Oryx off but set startup explicitly
            rem az webapp config set --ids "%APP_ID%" --startup-file "npm start"

            rem ===== Deploy ZIP =====
            if not exist app.zip (echo Missing app.zip in workspace >&2 & exit /b 1)
            az webapp deploy --ids "%APP_ID%" --src-path app.zip --type zip
            if errorlevel 1 exit /b 1

            rem ===== Health check with retries =====
            if not defined FQDN for /f "usebackq delims=" %%h in (`az webapp show --ids "%APP_ID%" --query defaultHostName -o tsv`) do set FQDN=%%h
            if not defined FQDN (echo Could not resolve hostname >&2 & exit /b 1)

            set COUNT=0
            :retry
            set /a COUNT+=1
            curl -fsS "https://%FQDN%%HEALTH_PATH%" >nul 2>nul && goto ok
            if %COUNT% LSS 10 (echo Retry %COUNT%... & timeout /t 6 >nul & goto retry)
            echo Health check failed at https://%FQDN%%HEALTH_PATH% >&2
            exit /b 1
            :ok
            echo Health check OK at https://%FQDN%%HEALTH_PATH%
          '''
        }
      }
    }
  }

  post {
    always { bat 'az logout || exit /b 0' }
    success { echo 'Deployment succeeded & health check passed.' }
    failure { echo 'Deployment failed. See logs above.' }
  }
}
