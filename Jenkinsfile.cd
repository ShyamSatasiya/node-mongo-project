pipeline {
    agent any

    parameters {
        string(name: 'CI_BUILD_NUM', defaultValue: '', description: 'Build number from CI to deploy (leave blank for latest successful).')
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }

    environment {
        CI_JOB_NAME = 'Node-mongo-webapp'
        APP_NAME    = 'node-mongo-sample-webapp'
        HEALTH_PATH = '/'  // change if your health endpoint is different
        NODE_VERSION = '18-lts'
    }

    stages {

        stage('Fetch Artifact from CI') {
            steps {
                script {
                    def sel = params.CI_BUILD_NUM?.trim() ? specific(params.CI_BUILD_NUM) : lastSuccessful()
                    step([$class: 'CopyArtifact',
                          projectName: env.CI_JOB_NAME,
                          selector: sel,
                          filter: 'dist/app.zip',
                          flatten: true,
                          fingerprintArtifacts: true])
                }
                bat '''
                    if not exist app.zip (
                        echo Missing app.zip in workspace >&2
                        exit /b 1
                    )
                '''
            }
        }

        stage('Login & Configure Azure') {
            steps {
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZ_APPID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZ_PASS'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZ_TENANT'),
                    string(credentialsId: 'azure-subscription-id', variable: 'AZ_SUB')
                ]) {
                    bat '''
                        @echo on
                        az --version || exit /b 1
                        az logout
                        az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%"
                        if errorlevel 1 exit /b 1
                        az account set --subscription "%AZ_SUB%"
                        if errorlevel 1 exit /b 1
                    '''
                }
            }
        }

        stage('Prepare & Deploy Web App') {
            steps {
                bat '''
                    rem ===== Resolve app =====
                    for /f "usebackq delims=" %%i in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].id" -o tsv`) do set APP_ID=%%i
                    for /f "usebackq delims=" %%h in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].defaultHostName" -o tsv`) do set FQDN=%%h
                    if not defined APP_ID (echo App "%APP_NAME%" not found >&2 & exit /b 1)

                    rem ===== Set Node version =====
                    az webapp config set --ids "%APP_ID%" --linux-fx-version "NODE|%NODE_VERSION%"
                    if errorlevel 1 exit /b 1

                    rem ===== Skip Oryx build (if already has node_modules) =====
                    az webapp config appsettings set --ids "%APP_ID%" --settings SCM_DO_BUILD_DURING_DEPLOYMENT=false
                    if errorlevel 1 exit /b 1

                    rem ===== Deploy ZIP =====
                    az webapp deploy --ids "%APP_ID%" --src-path app.zip --type zip
                    if errorlevel 1 exit /b 1
                '''
            }
        }

        stage('Verify Health') {
            steps {
                bat '''
                    set COUNT=0
                    :retry
                    set /a COUNT+=1
                    curl -fsS "https://%FQDN%%HEALTH_PATH%" >nul 2>nul && goto ok
                    if %COUNT% LSS 10 (echo Retry %COUNT%... & timeout /t 6 >nul & goto retry)
                    echo Health check failed at https://%FQDN%%HEALTH_PATH% >&2
                    exit /b 1
                    :ok
                    echo Health check OK at https://%FQDN%%HEALTH_PATH%
                '''
            }
        }

        stage('Tail Logs (Optional)') {
            steps {
                bat '''
                    az webapp log tail --name %APP_NAME% --subscription "%AZ_SUB%"
                '''
            }
        }
    }

    post {
        always { bat 'az logout || exit /b 0' }
        success { echo 'Deployment succeeded & health check passed.' }
        failure { echo 'Deployment failed. See logs above.' }
    }
}
