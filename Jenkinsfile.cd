pipeline {
  agent any

  environment {
    AZ_APPID  = credentials('azure-client-id')
    AZ_PASS   = credentials('azure-client-secret')
    AZ_TENANT = credentials('azure-tenant-id')
    AZ_SUB    = credentials('azure-subscription-id')
  }

  stages {
   stage('Login + Configure + Deploy + Verify') {
  steps {
    bat '''
      setlocal EnableExtensions EnableDelayedExpansion

      rem ===== Use a local az config (writable by Jenkins) =====
      set "AZURE_CONFIG_DIR=%cd%\\.azure"
      if not exist "%AZURE_CONFIG_DIR%" mkdir "%AZURE_CONFIG_DIR%"

      echo.
      echo === WHOAMI & ENV ===
      whoami
      echo AZURE_CONFIG_DIR=%AZURE_CONFIG_DIR%
      echo AZ_APPID=%AZ_APPID:~0,4%****
      echo AZ_TENANT=%AZ_TENANT:~0,4%****
      echo AZ_SUB=%AZ_SUB:~0,4%****

      echo.
      echo === STEP 1: Azure CLI sanity ===
      az --version || (echo [ERROR] Azure CLI not found & exit /b 1)
      az cloud set -n AzureCloud || (echo [ERROR] Failed to set cloud & exit /b 1)

      echo.
      echo === STEP 2: Start clean session ===
      az logout 2>nul
      if errorlevel 1 echo (no active account to logout is OK)

      echo.
      echo === STEP 3: Login with Service Principal ===
      az login --service-principal -u "%AZ_APPID%" -p "%AZ_PASS%" --tenant "%AZ_TENANT%" --only-show-errors
      if errorlevel 1 (
        echo [ERROR] az login failed
        type "%AZURE_CONFIG_DIR%\\azureProfile.json" 2>nul
        exit /b 1
      )

      echo.
      echo === STEP 4: Select subscription ===
      az account set --subscription "%AZ_SUB%" --only-show-errors
      if errorlevel 1 (
        echo [ERROR] az account set failed
        az account list -o table
        exit /b 1
      )
      for /f "usebackq delims=" %%s in (`az account show --query id -o tsv 2^>nul`) do set ACTIVE_SUB=%%s
      echo Active subscription: %ACTIVE_SUB%
      if "%ACTIVE_SUB%"=="" (echo [ERROR] No active subscription & exit /b 1)

      echo.
      echo === STEP 5: Resolve web app by name in this subscription ===
      set "APP_NAME=node-mongo-sample-webapp"
      for /f "usebackq delims=" %%i in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].id" -o tsv`) do set APP_ID=%%i
      for /f "usebackq delims=" %%h in (`az webapp list --query "[?name=='%APP_NAME%'] | [0].defaultHostName" -o tsv`) do set FQDN=%%h
      if not defined APP_ID (
        echo [ERROR] App "%APP_NAME%" not found in subscription %ACTIVE_SUB%
        az webapp list --query "[].{name:name,rg:resourceGroup}" -o table
        exit /b 1
      )
      echo APP_ID=%APP_ID%
      echo FQDN=%FQDN%

      echo.
      echo === STEP 6: Quick probe (no deploy yet) ===
      az webapp show --ids "%APP_ID%" --query "state" -o tsv
      if errorlevel 1 (echo [ERROR] Could not query app & exit /b 1)

      echo.
      echo === DONE: Login OK & app resolved ===
      endlocal
    '''
  }
}


  }
}
