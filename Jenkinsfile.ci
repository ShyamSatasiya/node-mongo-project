pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }

  tools {
    nodejs 'node18'   // Manage Jenkins → Global Tool Configuration → NodeJS
  }

  environment {
    REPO_URL = 'https://github.com/Azure-Samples/msdocs-nodejs-mongodb-azure-sample-app.git'
    ARTIFACT = 'dist\\app.zip'
  }

  stages {
    stage('Checkout') {
      steps { git url: "${env.REPO_URL}", branch: 'main' }
    }

    stage('Node & NPM versions') {
      steps { bat 'node -v && npm -v' }
    }

    stage('Prepare build workspace') {
      steps {
        bat '''
          if exist build rmdir /s /q build
          if exist dist rmdir /s /q dist
          mkdir build
          mkdir dist

          rem copy source into build/ (exclude junk & previous outputs)
          robocopy . build /MIR ^
            /XD build dist .git .github .devcontainer infra ^
            /XF .gitignore .gitattributes || exit /b 0
        '''
      }
    }

    stage('Install deps (production-ready)') {
      steps {
        bat '''
          cd build
          rem clean, deterministic install for CI
          call npm ci
          rem if there are devDeps, drop them to create a prod bundle
          call npm prune --omit=dev
        '''
      }
    }

    stage('Build (optional)') {
      steps {
        bat '''
          cd build
          rem run build only if package.json defines it
          powershell -NoProfile -Command ^
            "$s=(Get-Content package.json | ConvertFrom-Json).scripts; if($s -and ($s.PSObject.Properties.Name -contains 'build')){ exit 0 } else { exit 100 }"
          if %errorlevel%==0 (
            echo Found build script; running: npm run build
            call npm run build || exit /b 1
          ) else (
            echo No build script; continuing.
          )
          exit /b 0
        '''
      }
    }

    stage('Test (optional)') {
      steps {
        bat '''
          cd build
          powershell -NoProfile -Command ^
            "$s=(Get-Content package.json | ConvertFrom-Json).scripts; if($s -and ($s.PSObject.Properties.Name -contains 'test')){ exit 0 } else { exit 100 }"
          if %errorlevel%==0 (
            echo Found test script; running: npm test
            call npm test || exit /b 1
          ) else (
            echo No test script; continuing.
          )
          exit /b 0
        '''
      }
    }

    stage('Package') {
      steps {
        bat '''
          rem zip the *built* app with production node_modules
          powershell -NoProfile -Command ^
            "Compress-Archive -Path 'build\\*' -DestinationPath '%ARTIFACT%' -Force -CompressionLevel Optimal"
          dir dist
        '''
      }
    }

    stage('Publish Artifact') {
      steps { archiveArtifacts artifacts: 'dist/app.zip', fingerprint: true }
    }
  }

  post {
    success { echo "CI complete. Artifact published: ${env.ARTIFACT}" }
    failure { echo "CI failed — check logs." }
  }
}
