pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }

  tools {
    nodejs 'node18'     // Manage Jenkins → Global Tool Configuration → NodeJS
  }

  environment {
    REPO_URL   = 'https://github.com/Azure-Samples/msdocs-nodejs-mongodb-azure-sample-app.git'
    APP_NAME   = 'node-mongo-sample-webapp'
    ARTIFACT   = 'dist\\app.zip'
  }

  stages {
    stage('Checkout') {
      steps {
        git url: "${env.REPO_URL}", branch: 'main'
      }
    }

    stage('Node & NPM versions') {
      steps {
        bat '''
          node -v
          npm -v
        '''
      }
    }

    stage('Install') {
      steps {
        // If this fails, we DO want the build to fail
        bat 'call npm ci'
      }
    }

    stage('Build (optional)') {
      steps {
        bat '''
          call npm run > npm_scripts.txt || exit /b 0
          findstr /i "^  build" npm_scripts.txt >nul
          if %errorlevel%==0 (
            echo Found a build script. Running: npm run build
            call npm run build || exit /b 1
          ) else (
            echo No build script found. Skipping.
          )
          exit /b 0
        '''
      }
    }

    stage('Test (optional)') {
      steps {
        // If tests exist, run them. If not, don't fail the build.
        bat '''
          call npm run > npm_scripts.txt || exit /b 0
          findstr /i "^  test" npm_scripts.txt >nul
          if %errorlevel%==0 (
            echo Found a test script. Running: npm test
            call npm test || exit /b 1
          ) else (
            echo No test script found. Skipping.
          )
          exit /b 0
        '''
      }
    }

    stage('Package') {
      steps {
        // Zip everything EXCEPT node_modules (Oryx will build on deploy)
        bat '''
          if exist dist rmdir /s /q dist
          mkdir dist

          rem Remove node_modules to keep artifact small
          if exist node_modules rmdir /s /q node_modules

          rem Create ZIP via PowerShell (Windows built-in)
          powershell -NoProfile -Command ^
            "Compress-Archive -Path * -DestinationPath '%ARTIFACT%' -Force -CompressionLevel Optimal"

          dir dist
        '''
      }
    }

    stage('Publish Artifact') {
      steps {
        archiveArtifacts artifacts: 'dist/app.zip', fingerprint: true
      }
    }
  }

  post {
    success {
      echo "CI complete. Artifact published: ${env.ARTIFACT}"
    }
    failure {
      echo "CI failed — check the stage logs above."
    }
  }
}
