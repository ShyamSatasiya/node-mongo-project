pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }

  tools {
    nodejs 'node18'
  }

  environment {
    REPO_URL = 'https://github.com/Azure-Samples/msdocs-nodejs-mongodb-azure-sample-app.git'
    ARTIFACT = 'dist/app.zip'
  }

  stages {
    stage('Checkout') {
      steps {
        git url: "${env.REPO_URL}", branch: 'main'
      }
    }

    stage('Node & NPM versions') {
      steps {
        bat 'node -v && npm -v'
      }
    }

    stage('Prepare build') {
      steps {
        bat '''
          if exist build rmdir /s /q build
          if exist dist rmdir /s /q dist
          mkdir build
          mkdir dist
          robocopy . build /MIR ^
            /XD build dist .git .github .devcontainer infra ^
            /XF .gitignore .gitattributes || exit /b 0
        '''
      }
    }

    stage('Install production deps') {
      steps {
        bat '''
          cd build
          call npm ci
          call npm prune --omit=dev
        '''
      }
    }

    stage('Build (optional)') {
      steps {
        bat '''
          cd build
          powershell -NoProfile -Command ^
            "$s=(Get-Content package.json | ConvertFrom-Json).scripts; if($s -and ($s.PSObject.Properties.Name -contains 'build')){ exit 0 } else { exit 100 }"
          if %errorlevel%==0 (
            echo Found build script; running: npm run build
            call npm run build || exit /b 1
          ) else (
            echo No build script; continuing.
          )
          exit /b 0
        '''
      }
    }

    stage('Test (optional)') {
      steps {
        bat '''
          cd build
          powershell -NoProfile -Command ^
            "$s=(Get-Content package.json | ConvertFrom-Json).scripts; if($s -and ($s.PSObject.Properties.Name -contains 'test')){ exit 0 } else { exit 100 }"
          if %errorlevel%==0 (
            echo Found test script; running: npm test
            call npm test || exit /b 1
          ) else (
            echo No test script; continuing.
          )
          exit /b 0
        '''
      }
    }

    stage('Package ZIP for Azure') {
  steps {
    bat '''
      rem Delete previous zip
      if exist dist\\app.zip del dist\\app.zip

      rem Use .NET API to zip the "build" folder contents
      powershell -NoProfile -Command ^
        "Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::CreateFromDirectory('build', 'dist/app.zip', 'Optimal', $false)"

      dir dist
    '''
  }
}

    stage('Publish Artifact') {
      steps {
        archiveArtifacts artifacts: "${env.ARTIFACT}", fingerprint: true
      }
    }
  }

  post {
    success {
      echo "✅ CI complete. Artifact ready for Azure: ${env.ARTIFACT}"
    }
    failure {
      echo "❌ CI failed — check build log."
    }
  }
}
